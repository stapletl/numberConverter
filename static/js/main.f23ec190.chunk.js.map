{"version":3,"sources":["Textarea.js","App.js","reportWebVitals.js","index.js"],"names":["Textarea","props","onChange","value","type","onInput","event","App","useState","dec","setdec","bin","setbin","hex","sethex","oct","setoct","col","setcol","update","updatedValue","target","console","log","num","err","isNaN","length","temp","toString","i","indexOf","parseInt","cleanBin","allowed","str","cleanHex","cleanOct","alert","className","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f23ec190.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Textarea = props => {\r\n    const { onChange, value, type } = props;\r\n    return (\r\n        <textarea onInput={ (event) => onChange(event, type) } value={ value } type={ type } />\r\n    )\r\n}\r\nexport default Textarea;","import './App.css';\nimport Textarea from './Textarea'\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  const [dec, setdec] = useState(0);\n  const [bin, setbin] = useState(0);\n  const [hex, sethex] = useState(0);\n  const [oct, setoct] = useState(0);\n  const [col, setcol] = useState('white');\n\n  function cleanDec(num) {\n    if (isNaN(num))\n      return [true, num];\n    return [false, num];\n  }\n\n  function cleanBin(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    if (isNaN(num)) {\n      return [true, num];\n    }\n    let temp = num.toString();\n    for (let i = 2; i < 10; i++) {\n      if (temp.indexOf(i) !== -1) {\n        return [true, num];\n      }\n    }\n    return [false, parseInt(num.toString(),2)];\n  }\n\n  function cleanHex(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    let allowed = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n      if(allowed.indexOf(str[i]) === -1){\n        return [true, num];\n      }\n    }\n    return [false, parseInt(num, 16)];\n  }\n\n  function cleanOct(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    if (isNaN(num))\n      return [true, num];\n\n    let temp = num.toString();\n    for (let i = 8; i < 10; i++) {\n      if (temp.indexOf(i) !== -1)\n        return [true, num];\n    }\n    return [false, parseInt(num.toString(),8)];\n  }\n\n  function update(event, type) {\n\n    let updatedValue = event.target.value;\n\n    console.log(type);\n\n    let err = false;\n\n    switch (type) {\n      case \"Decimal\":\n        [err, updatedValue] = cleanDec(updatedValue);\n        break;\n      case \"Binary\":\n        [err, updatedValue] = cleanBin(updatedValue);\n        break;\n      case \"Hexadecimal\":\n        [err, updatedValue] = cleanHex(updatedValue);\n        break;\n      case \"Octal\":\n        [err, updatedValue] = cleanOct(updatedValue);\n        break;\n      default:\n        err = true;\n        updatedValue = '';\n        break;\n    }\n\n    if (err) {\n      if(updatedValue !== \"\")\n        setcol('#FF8095'); //set background red\n\n      setdec(updatedValue);\n      setbin(updatedValue);\n      sethex(updatedValue);\n      setoct(updatedValue);\n      //do some error shit\n    }\n    else {\n      if(updatedValue > 4294967295 || updatedValue < -4294967295)\n      {\n        updatedValue = 0;\n        alert(\"Overflow! lol\");\n      }\n      setcol('white'); //set background white\n\n      setdec(updatedValue);\n      setbin((updatedValue >>> 0).toString(2));\n      sethex((updatedValue >>> 0).toString(16));\n      setoct((updatedValue >>> 0).toString(8));\n    }\n    console.log(updatedValue.toString());\n  }\n\n  return (\n    <div className=\"Window\" style={{backgroundColor: (col)}}>\n      <div className=\"App\">\n        <div className='Wrapper'>\n          <h1 className='Header'>\n            Decimal\n          </h1>\n          <Textarea onChange={update} value={dec} type=\"Decimal\" />\n          <h1 className='Header'>\n            Binary\n          </h1>\n          <Textarea onChange={update} value={bin} type=\"Binary\" />\n          <h1 className='Header'>\n            Hexadecimal\n          </h1>\n          <Textarea onChange={update} value={hex} type=\"Hexadecimal\" />\n          <h1 className='Header'>\n            Octal\n          </h1>\n          <Textarea onChange={update} value={oct} type=\"Octal\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}