{"version":3,"sources":["Textarea.js","RoundSwitch.js","App.js","reportWebVitals.js","index.js"],"names":["Textarea","props","onChange","value","type","onInput","event","RoundSwitch","className","toggle","back","App","useState","dec","setdec","bin","setbin","hex","sethex","oct","setoct","col","setcol","update","num","updatedValue","target","err","length","isNaN","temp","toString","i","indexOf","parseInt","cleanBin","allowed","str","cleanHex","cleanOct","alert","style","backgroundColor","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c7487eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Textarea = props => {\r\n    const { onChange, value, type } = props;\r\n    return (\r\n        <textarea onInput={ (event) => onChange(event, type) } value={ value } type={ type } />\r\n    )\r\n}\r\nexport default Textarea;","import './RoundSwitch.css';\r\nimport React from 'react';\r\n\r\nfunction RoundSwitch() {\r\n    return(\r\n        <label className=\"switch\">\r\n            <input type=\"checkbox\"/>\r\n            <span className=\"slider round\"></span>\r\n        </label>\r\n    );\r\n}\r\nexport default RoundSwitch;","import './App.css';\nimport Textarea from './Textarea'\nimport RoundSwitch from './RoundSwitch';\nimport React, { useState } from 'react';\n\nlet toggle = 1;\nlet back = '#424242';\n\nfunction App() {\n\n  const [dec, setdec] = useState(0);\n  const [bin, setbin] = useState(0);\n  const [hex, sethex] = useState(0);\n  const [oct, setoct] = useState(0);\n  //const [back, setback] = useState('#424242');\n  const [col, setcol] = useState(back);\n\n  function cleanDec(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    if (isNaN(num))\n      return [true, num];\n    return [false, num];\n  }\n\n  function cleanBin(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    if (isNaN(num)) {\n      return [true, num];\n    }\n    let temp = num.toString();\n    for (let i = 2; i < 10; i++) {\n      if (temp.indexOf(i) !== -1) {\n        return [true, num];\n      }\n    }\n    return [false, parseInt(num.toString(),2)];\n  }\n\n  function cleanHex(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    let allowed = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n      if(allowed.indexOf(str[i]) === -1){\n        return [true, num];\n      }\n    }\n    return [false, parseInt(num, 16)];\n  }\n\n  function cleanOct(num) {\n    if(num.length === 0) {\n      return [true, \"\"];\n    }\n    if (isNaN(num))\n      return [true, num];\n\n    let temp = num.toString();\n    for (let i = 8; i < 10; i++) {\n      if (temp.indexOf(i) !== -1)\n        return [true, num];\n    }\n    return [false, parseInt(num.toString(),8)];\n  }\n\n  function update(event, type) {\n\n    let updatedValue = event.target.value;\n\n    let err = false;\n\n    switch (type) {\n      case \"Decimal\":\n        [err, updatedValue] = cleanDec(updatedValue);\n        break;\n      case \"Binary\":\n        [err, updatedValue] = cleanBin(updatedValue);\n        break;\n      case \"Hexadecimal\":\n        [err, updatedValue] = cleanHex(updatedValue);\n        break;\n      case \"Octal\":\n        [err, updatedValue] = cleanOct(updatedValue);\n        break;\n      default:\n        err = true;\n        updatedValue = '';\n        break;\n    }\n\n    if (err) {\n\n      setcol('#FF8095'); //set background red\n\n      if(updatedValue === \"\")\n        setcol(back); //set background red\n\n      setdec(updatedValue);\n      setbin(updatedValue);\n      sethex(updatedValue);\n      setoct(updatedValue);\n      //do some error shit\n    }\n    else {\n      if(updatedValue > 4294967295 || updatedValue < -4294967295)\n      {\n        updatedValue = 0;\n        alert(\"Overflow! lol\");\n      }\n      setcol(back); //set background white\n\n      setdec(updatedValue);\n      setbin((updatedValue >>> 0).toString(2));\n      sethex((updatedValue >>> 0).toString(16));\n      setoct((updatedValue >>> 0).toString(8));\n    }\n  }\n\n  function colorMode() {\n    console.log(toggle);\n    if(toggle % 2 === 1)\n    {\n      back = ('#ddd');\n    }\n    if(toggle % 2 === 0)\n    {\n      back = ('#424242'); \n    }\n    toggle++;\n    console.log(back);\n    setcol(back);\n  }\n\n  return (\n    <div className=\"Window\" style={{backgroundColor: (col)}}>\n      <div className=\"App\" >        \n        <div className='Wrapper'>\n          <div onChange={colorMode}>\n            <RoundSwitch />\n          </div>\n          <h1 className='Header'>\n            Decimal\n          </h1>\n          <Textarea onChange={update} value={dec} type=\"Decimal\" />\n          <h1 className='Header'>\n            Binary\n          </h1>\n          <Textarea onChange={update} value={bin} type=\"Binary\" />\n          <h1 className='Header'>\n            Hexadecimal\n          </h1>\n          <Textarea onChange={update} value={hex} type=\"Hexadecimal\" />\n          <h1 className='Header'>\n            Octal\n          </h1>\n          <Textarea onChange={update} value={oct} type=\"Octal\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}